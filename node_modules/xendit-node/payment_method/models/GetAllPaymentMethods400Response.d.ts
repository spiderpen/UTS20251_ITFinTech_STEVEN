/**
 * NOTE: This file is auto generated by Xendit.
 * Do not edit the class manually.
 * Improvements? Share your ideas at https://github.com/xendit/xendit-node
 */
/**
 *
 * @export
 * @interface GetAllPaymentMethods400Response
 */
export interface GetAllPaymentMethods400Response {
    /**
     *
     * @type {string}
     * @memberof GetAllPaymentMethods400Response
     */
    errorCode?: GetAllPaymentMethods400ResponseErrorCodeEnum;
    /**
     *
     * @type {string}
     * @memberof GetAllPaymentMethods400Response
     */
    message?: string;
}
/**
 * @export
 */
export declare const GetAllPaymentMethods400ResponseErrorCodeEnum: {
    readonly AccountAccessBlocked: "ACCOUNT_ACCESS_BLOCKED";
    readonly AddressValidationFailed: "ADDRESS_VALIDATION_FAILED";
    readonly AmountMismatched: "AMOUNT_MISMATCHED";
    readonly ApiValidationError: "API_VALIDATION_ERROR";
    readonly AuthenticationFailed: "AUTHENTICATION_FAILED";
    readonly AuthenticationRequired: "AUTHENTICATION_REQUIRED";
    readonly BrandNotSupported: "BRAND_NOT_SUPPORTED";
    readonly CardDeclined: "CARD_DECLINED";
    readonly ChannelCodeNotSupportedError: "CHANNEL_CODE_NOT_SUPPORTED_ERROR";
    readonly CofCombinationNotAllowedError: "COF_COMBINATION_NOT_ALLOWED_ERROR";
    readonly CurrencyMismatched: "CURRENCY_MISMATCHED";
    readonly CustomerNotFoundError: "CUSTOMER_NOT_FOUND_ERROR";
    readonly CustomerPaymentMethodMismatched: "CUSTOMER_PAYMENT_METHOD_MISMATCHED";
    readonly DeclinedByIssuer: "DECLINED_BY_ISSUER";
    readonly DeclinedByProcessor: "DECLINED_BY_PROCESSOR";
    readonly DuplicatedFixedPaymentInstrument: "DUPLICATED_FIXED_PAYMENT_INSTRUMENT";
    readonly DuplicateReference: "DUPLICATE_REFERENCE";
    readonly ExpiredCard: "EXPIRED_CARD";
    readonly ExpiredOtpError: "EXPIRED_OTP_ERROR";
    readonly FeatureNotActivated: "FEATURE_NOT_ACTIVATED";
    readonly InactiveOrUnauthorizedCard: "INACTIVE_OR_UNAUTHORIZED_CARD";
    readonly InactivePaymentMethod: "INACTIVE_PAYMENT_METHOD";
    readonly IncorrectAmount: "INCORRECT_AMOUNT";
    readonly InsufficientBalance: "INSUFFICIENT_BALANCE";
    readonly InvalidAccountDetails: "INVALID_ACCOUNT_DETAILS";
    readonly InvalidCvv: "INVALID_CVV";
    readonly InvalidLinkedAccount: "INVALID_LINKED_ACCOUNT";
    readonly InvalidOtpError: "INVALID_OTP_ERROR";
    readonly InvalidPaymentMethod: "INVALID_PAYMENT_METHOD";
    readonly InvalidToken: "INVALID_TOKEN";
    readonly LinkedAccountNotFoundError: "LINKED_ACCOUNT_NOT_FOUND_ERROR";
    readonly MaxAccountLinking: "MAX_ACCOUNT_LINKING";
    readonly MaxAmountLimitError: "MAX_AMOUNT_LIMIT_ERROR";
    readonly MaxOtpAttemptsError: "MAX_OTP_ATTEMPTS_ERROR";
    readonly NotSupportedByChannel: "NOT_SUPPORTED_BY_CHANNEL";
    readonly OperationNotAllowed: "OPERATION_NOT_ALLOWED";
    readonly OtpDeliveryError: "OTP_DELIVERY_ERROR";
    readonly PartnerChannelError: "PARTNER_CHANNEL_ERROR";
    readonly PaymentMethodNotFoundError: "PAYMENT_METHOD_NOT_FOUND_ERROR";
    readonly PaymentMethodNotSupported: "PAYMENT_METHOD_NOT_SUPPORTED";
    readonly PaymentMethodReusabilityInvalid: "PAYMENT_METHOD_REUSABILITY_INVALID";
    readonly PaymentMethodStatusInvalid: "PAYMENT_METHOD_STATUS_INVALID";
    readonly PaymentMethodTypeInvalid: "PAYMENT_METHOD_TYPE_INVALID";
};
export type GetAllPaymentMethods400ResponseErrorCodeEnum = typeof GetAllPaymentMethods400ResponseErrorCodeEnum[keyof typeof GetAllPaymentMethods400ResponseErrorCodeEnum];
/**
 * Check if a given object implements the GetAllPaymentMethods400Response interface.
 */
export declare function instanceOfGetAllPaymentMethods400Response(value: object): boolean;
export declare function GetAllPaymentMethods400ResponseFromJSON(json: any): GetAllPaymentMethods400Response;
export declare function GetAllPaymentMethods400ResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): GetAllPaymentMethods400Response;
export declare function GetAllPaymentMethods400ResponseToJSON(value?: GetAllPaymentMethods400Response | null): any;
